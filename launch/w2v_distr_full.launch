<?xml version="1.0"?>
<launch>

    <!-- Setup Arguments for the machine -->
    <arg name="machine" default="Nano"/>
    <machine name="$(arg machine)" address="nano-wired" user="nico" env-loader="/home/nico/catkin_ws/devel/env_new.sh" timeout="10.0" default="false" />

    <!-- Setup Arguments for profiler -->
    <param name="enable_statistics" value="true"/>
    <node machine="$(arg machine)" pkg="rosprofiler" type="rosprofiler" name="rosprofiler_$(arg machine)" output="screen"/>
    <node pkg="rosprofiler" type="rosprofiler" name="$(anon rosprofiler)" output="screen"/>
    <node pkg="rosprofiler" type="rosgrapher" name="rosgrapher" output="screen"/>

    <!-- 0. Setup arguments -->
    <arg name="gui" default="false"/>
    <arg name="verbose" default="true"/>
    <arg name="world_name" default="$(find aruco_client)/worlds/word2vec_empty.world"/>
    <arg name="paused" default="false"/>
    <arg name="use_sim_time" default="true"/>
    <arg name="respawn_gazebo" default="false"/>

    <!-- 2. Load the hitl model of the iris -->
    <arg name="x" default="0"/>
    <arg name="y" default="0"/>
    <arg name="z" default="0.1"/>
    <arg name="R" default="0"/>
    <arg name="P" default="0"/>
    <arg name="Y" default="0"/>
    <arg name="vehicle" default="iris"/>
    <arg name="model_name" default="iris_bottom_cam_hitl"/>
    <arg name="sdf" default="$(find mavlink_sitl_gazebo)/models/$(arg model_name)/$(arg model_name).sdf"/>
    <node name="$(anon vehicle_spawn)" pkg="gazebo_ros" type="spawn_model" output="screen" args="-sdf -file $(arg sdf) -model $(arg vehicle) -x $(arg x) -y $(arg y) -z $(arg z) -R $(arg R) -P $(arg P) -Y $(arg Y)"/>

    <!-- 1. Launch a Gazebo File with the right settings -->
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="paused" value="$(arg paused)"/>
        <arg name="world_name" value="$(arg world_name)"/>
        <arg name="use_sim_time" value="$(arg use_sim_time)"/>
        <arg name="gui" value="$(arg gui)"/>
        <arg name="recording" value="false"/>
        <arg name="debug" value="false"/>
        <arg name="verbose" value="$(arg verbose)"/>
        <arg name="respawn_gazebo" value="$(arg respawn_gazebo)"/>
    </include>

    <!-- 3. Load the Mavros node with the correct connection  -->
    <arg name="respawn_mavros" default="false"/>
    <arg name="fcu_url" default="udp://:14540@localhost:14557"/>
    <include file="$(find mavros)/launch/px4.launch">
        <arg name="gcs_url" value=""/>
        <arg name="fcu_url" value="$(arg fcu_url)"/>
        <arg name="respawn_mavros" value="$(arg respawn_mavros)"/>
    </include>

    <!-- 4. Load all the shwizzle for our system -->
    <!-- <node name="offb_test" pkg="iris_control" type="offb_node"/> -->
    <arg name="init_wps" default="$(find knowledge_server)/config/Initial_WPs.csv"/>
    <arg name="sim_case" default="1"/>

    <!-- 4.1. Marker Detection -->
    <include file="$(find ml_detector)/launch/marker_detect.launch">
        <arg name="image_topic" value="/$(arg vehicle)/usb_cam/image_raw"/>
        <arg name="camera_info_topic" value="/$(arg vehicle)/usb_cam/camera_info"/>
    </include>

    <!-- 4.2 transform broadcaster -->
    <node pkg="aruco_client" type="base_link_tf2_broadcaster" name="base_link_world"/>
    <node pkg="tf2_ros" type="static_transform_publisher" name="camera_tf_broadcaster" args="0.0 0.0 -0.03 1.57 3.14 0.0 base_link robot_camera_link"/>

    <!-- 4.3 the Node sending out the waypoints -->
    <node machine="$(arg machine)" pkg="aruco_client" type="wp_node" name="wp_node" output="screen"/>

    <!-- 4.4 The Gazebo spawn file -->
    <node pkg="knowledge_server" name="$(anon marker_spawn)" type="gazebo_spawning.py" output="screen" args="$(arg sim_case)"/>

    <!-- 4.5 An RVIZ file -->
    <!-- <node type="rviz" name="rviz" pkg="rviz" args="-d $(find aruco_client)/config/rviz_config.rviz" /> -->

    <!-- 4.6 the Knowledgebase shwizzle -->
    <group ns="knowledgebase">
        <rosparam command="load" file="$(find knowledge_server)/config/parameters.yaml"/>
        <node pkg="knowledge_server" name="detection" type="word2vec_detection_reduced.py" output="screen"/>
        <node pkg="knowledge_server" name="tf_server" type="register_tf_server_reduced.py" output="screen"/>
        <node pkg="knowledge_server" name="cam_tf" type="cam_points_transform.py" output="screen"/>
        <node pkg="knowledge_server" name="map_server" type="word2vec_mapping.py" output="screen"/>
        <node machine="$(arg machine)" pkg="knowledge_server" name="navigator" type="word2vec_navigation.py" output="screen" args="$(arg init_wps)"/>
        <!-- <node pkg="knowledge_server" name="Surveillance_Node" type="surveillance_node.py" output="screen"/> -->
    </group>



</launch>
